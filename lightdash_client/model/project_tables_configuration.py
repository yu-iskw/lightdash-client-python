# coding: utf-8
"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date
from datetime import datetime

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class ProjectTablesConfiguration(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "tableSelection",
        }

        class properties:


            class tableSelection(
                schemas.DictSchema
            ):


                class MetaOapg:
                    required = {
                        "type",
                        "value",
                    }

                    class properties:


                        class type(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):


                            class MetaOapg:
                                enum_value_to_name = {
                                    "ALL": "ALL",
                                    "WITH_TAGS": "WITH_TAGS",
                                    "WITH_NAMES": "WITH_NAMES",
                                }

                            @schemas.classproperty
                            def ALL(cls):
                                return cls("ALL")

                            @schemas.classproperty
                            def WITH_TAGS(cls):
                                return cls("WITH_TAGS")

                            @schemas.classproperty
                            def WITH_NAMES(cls):
                                return cls("WITH_NAMES")


                        class value(
                            schemas.ListBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneTupleMixin
                        ):


                            class MetaOapg:
                                items = schemas.StrSchema


                            def __new__(
                                cls,
                                *_args: typing.Union[list, tuple, None, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'value':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        __annotations__ = {
                            "type": type,
                            "value": value,
                        }

                type: MetaOapg.properties.type
                value: MetaOapg.properties.value

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...

                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

                def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "value", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)


                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...

                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...

                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "value", ], str]):
                    return super().get_item_oapg(name)


                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    type: typing.Union[MetaOapg.properties.type, str, ],
                    value: typing.Union[MetaOapg.properties.value, list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tableSelection':
                    return super().__new__(
                        cls,
                        *_args,
                        type=type,
                        value=value,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "tableSelection": tableSelection,
            }

    tableSelection: MetaOapg.properties.tableSelection

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tableSelection"]) -> MetaOapg.properties.tableSelection: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tableSelection", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tableSelection"]) -> MetaOapg.properties.tableSelection: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tableSelection", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tableSelection: typing.Union[MetaOapg.properties.tableSelection, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectTablesConfiguration':
        return super().__new__(
            cls,
            *_args,
            tableSelection=tableSelection,
            _configuration=_configuration,
            **kwargs,
        )
