# coding: utf-8

"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class DashboardFilterRule(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "id",
            "operator",
            "target",
        }

        class properties:
            id = schemas.UUIDSchema


            class target(
                schemas.DictSchema
            ):


                class MetaOapg:

                    class properties:
                        fieldId = schemas.StrSchema
                        tableName = schemas.StrSchema
                        __annotations__ = {
                            "fieldId": fieldId,
                            "tableName": tableName,
                        }

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["fieldId"]) -> MetaOapg.properties.fieldId: ...

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tableName"]) -> MetaOapg.properties.tableName: ...

                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

                def __getitem__(self, name: typing.Union[typing_extensions.Literal["fieldId", "tableName", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)


                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["fieldId"]) -> typing.Union[MetaOapg.properties.fieldId, schemas.Unset]: ...

                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tableName"]) -> typing.Union[MetaOapg.properties.tableName, schemas.Unset]: ...

                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fieldId", "tableName", ], str]):
                    return super().get_item_oapg(name)


                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    fieldId: typing.Union[MetaOapg.properties.fieldId, str, schemas.Unset] = schemas.unset,
                    tableName: typing.Union[MetaOapg.properties.tableName, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'target':
                    return super().__new__(
                        cls,
                        *_args,
                        fieldId=fieldId,
                        tableName=tableName,
                        _configuration=_configuration,
                        **kwargs,
                    )
            operator = schemas.StrSchema
            values = schemas.Schema
            settings = schemas.DictSchema
            label = schemas.StrSchema


            class tileTargets(
                schemas.DictSchema
            ):


                class MetaOapg:

                    class properties:


                        class tileUuid(
                            schemas.DictSchema
                        ):


                            class MetaOapg:

                                class properties:
                                    fieldId = schemas.StrSchema
                                    tableName = schemas.StrSchema
                                    __annotations__ = {
                                        "fieldId": fieldId,
                                        "tableName": tableName,
                                    }

                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["fieldId"]) -> MetaOapg.properties.fieldId: ...

                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["tableName"]) -> MetaOapg.properties.tableName: ...

                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["fieldId", "tableName", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)


                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["fieldId"]) -> typing.Union[MetaOapg.properties.fieldId, schemas.Unset]: ...

                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["tableName"]) -> typing.Union[MetaOapg.properties.tableName, schemas.Unset]: ...

                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fieldId", "tableName", ], str]):
                                return super().get_item_oapg(name)


                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                fieldId: typing.Union[MetaOapg.properties.fieldId, str, schemas.Unset] = schemas.unset,
                                tableName: typing.Union[MetaOapg.properties.tableName, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'tileUuid':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    fieldId=fieldId,
                                    tableName=tableName,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "tileUuid": tileUuid,
                        }

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tileUuid"]) -> MetaOapg.properties.tileUuid: ...

                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

                def __getitem__(self, name: typing.Union[typing_extensions.Literal["tileUuid", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)


                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tileUuid"]) -> typing.Union[MetaOapg.properties.tileUuid, schemas.Unset]: ...

                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tileUuid", ], str]):
                    return super().get_item_oapg(name)


                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    tileUuid: typing.Union[MetaOapg.properties.tileUuid, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tileTargets':
                    return super().__new__(
                        cls,
                        *_args,
                        tileUuid=tileUuid,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "target": target,
                "operator": operator,
                "values": values,
                "settings": settings,
                "label": label,
                "tileTargets": tileTargets,
            }
        additional_properties = schemas.NotAnyTypeSchema

    id: MetaOapg.properties.id
    operator: MetaOapg.properties.operator
    target: MetaOapg.properties.target

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target"]) -> MetaOapg.properties.target: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> MetaOapg.properties.settings: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tileTargets"]) -> MetaOapg.properties.tileTargets: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["operator"], typing_extensions.Literal["target"], typing_extensions.Literal["values"], typing_extensions.Literal["settings"], typing_extensions.Literal["label"], typing_extensions.Literal["tileTargets"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target"]) -> MetaOapg.properties.target: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> typing.Union[MetaOapg.properties.values, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> typing.Union[MetaOapg.properties.settings, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tileTargets"]) -> typing.Union[MetaOapg.properties.tileTargets, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["operator"], typing_extensions.Literal["target"], typing_extensions.Literal["values"], typing_extensions.Literal["settings"], typing_extensions.Literal["label"], typing_extensions.Literal["tileTargets"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        operator: typing.Union[MetaOapg.properties.operator, str, ],
        target: typing.Union[MetaOapg.properties.target, dict, frozendict.frozendict, ],
        values: typing.Union[MetaOapg.properties.values, schemas.Unset] = schemas.unset,
        settings: typing.Union[MetaOapg.properties.settings, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        tileTargets: typing.Union[MetaOapg.properties.tileTargets, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DashboardFilterRule':
        return super().__new__(
            cls,
            *_args,
            id=id,
            operator=operator,
            target=target,
            values=values,
            settings=settings,
            label=label,
            tileTargets=tileTargets,
            _configuration=_configuration,
        )
