# coding: utf-8

"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class CreateDashboardTile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "w",
            "h",
            "x",
            "y",
            "type",
            "properties",
        }

        class properties:


            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):

                @schemas.classproperty
                def SAVED_CHART(cls):
                    return cls("saved_chart")

                @schemas.classproperty
                def MARKDOWN(cls):
                    return cls("markdown")

                @schemas.classproperty
                def LOOM(cls):
                    return cls("loom")


            class properties(
                schemas.ComposedSchema,
            ):


                class MetaOapg:

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TilePropertiesChart,
                            LoomTileProperties,
                            MarkdownTileProperties,
                        ]


                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'properties':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            x = schemas.NumberSchema
            y = schemas.NumberSchema
            h = schemas.NumberSchema
            w = schemas.NumberSchema
            uuid = schemas.UUIDSchema
            __annotations__ = {
                "type": type,
                "properties": properties,
                "x": x,
                "y": y,
                "h": h,
                "w": w,
                "uuid": uuid,
            }

    w: MetaOapg.properties.w
    h: MetaOapg.properties.h
    x: MetaOapg.properties.x
    y: MetaOapg.properties.y
    type: MetaOapg.properties.type
    properties: MetaOapg.properties.properties

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["h"]) -> MetaOapg.properties.h: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["w"]) -> MetaOapg.properties.w: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "properties", "x", "y", "h", "w", "uuid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["h"]) -> MetaOapg.properties.h: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["w"]) -> MetaOapg.properties.w: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "properties", "x", "y", "h", "w", "uuid", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        w: typing.Union[MetaOapg.properties.w, decimal.Decimal, int, float, ],
        h: typing.Union[MetaOapg.properties.h, decimal.Decimal, int, float, ],
        x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, float, ],
        y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, float, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        properties: typing.Union[MetaOapg.properties.properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateDashboardTile':
        return super().__new__(
            cls,
            *_args,
            w=w,
            h=h,
            x=x,
            y=y,
            type=type,
            properties=properties,
            uuid=uuid,
            _configuration=_configuration,
            **kwargs,
        )

from lightdash_client.model.loom_tile_properties import LoomTileProperties
from lightdash_client.model.markdown_tile_properties import MarkdownTileProperties
from lightdash_client.model.tile_properties_chart import TilePropertiesChart
