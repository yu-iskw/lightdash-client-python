# coding: utf-8

"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class Error(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "error",
            "status",
        }

        class properties:


            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):

                @schemas.classproperty
                def ERROR(cls):
                    return cls("error")


            class error(
                schemas.DictSchema
            ):


                class MetaOapg:
                    required = {
                        "name",
                        "message",
                        "statusCode",
                    }

                    class properties:
                        name = schemas.StrSchema
                        statusCode = schemas.NumberSchema
                        message = schemas.StrSchema
                        data = schemas.DictSchema
                        __annotations__ = {
                            "name": name,
                            "statusCode": statusCode,
                            "message": message,
                            "data": data,
                        }

                name: MetaOapg.properties.name
                message: MetaOapg.properties.message
                statusCode: MetaOapg.properties.statusCode

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["statusCode"]) -> MetaOapg.properties.statusCode: ...

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...

                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

                def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "statusCode", "message", "data", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)


                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["statusCode"]) -> MetaOapg.properties.statusCode: ...

                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...

                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...

                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "statusCode", "message", "data", ], str]):
                    return super().get_item_oapg(name)


                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    name: typing.Union[MetaOapg.properties.name, str, ],
                    message: typing.Union[MetaOapg.properties.message, str, ],
                    statusCode: typing.Union[MetaOapg.properties.statusCode, decimal.Decimal, int, float, ],
                    data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'error':
                    return super().__new__(
                        cls,
                        *_args,
                        name=name,
                        message=message,
                        statusCode=statusCode,
                        data=data,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "status": status,
                "error": error,
            }

    error: MetaOapg.properties.error
    status: MetaOapg.properties.status

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "error", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        error: typing.Union[MetaOapg.properties.error, dict, frozendict.frozendict, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Error':
        return super().__new__(
            cls,
            *_args,
            error=error,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
