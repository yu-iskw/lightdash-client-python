# coding: utf-8

"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class UpdateDashboard(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:


        class one_of_0(
            schemas.DictSchema
        ):


            class MetaOapg:

                class properties:
                    name = schemas.StrSchema


                    class description(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):


                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'description':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )


                    class spaceUuid(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):


                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'spaceUuid':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
                    __annotations__ = {
                        "name": name,
                        "description": description,
                        "spaceUuid": spaceUuid,
                    }
                additional_properties = schemas.NotAnyTypeSchema

            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...

            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["spaceUuid"]) -> MetaOapg.properties.spaceUuid: ...

            def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["spaceUuid"], ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)

            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...

            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...

            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["spaceUuid"]) -> typing.Union[MetaOapg.properties.spaceUuid, schemas.Unset]: ...

            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["spaceUuid"], ]):
                return super().get_item_oapg(name)

            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
                spaceUuid: typing.Union[MetaOapg.properties.spaceUuid, None, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    *_args,
                    name=name,
                    description=description,
                    spaceUuid=spaceUuid,
                    _configuration=_configuration,
                )


        class one_of_1(
            schemas.DictSchema
        ):


            class MetaOapg:
                required = {
                    "tiles",
                    "filters",
                }

                class properties:


                    class tiles(
                        schemas.ListSchema
                    ):


                        class MetaOapg:

                            @staticmethod
                            def items() -> typing.Type['CreateDashboardTile']:
                                return CreateDashboardTile

                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['CreateDashboardTile'], typing.List['CreateDashboardTile']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'tiles':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )

                        def __getitem__(self, i: int) -> 'CreateDashboardTile':
                            return super().__getitem__(i)

                    @staticmethod
                    def filters() -> typing.Type['DashboardFilters']:
                        return DashboardFilters
                    __annotations__ = {
                        "tiles": tiles,
                        "filters": filters,
                    }
                additional_properties = schemas.NotAnyTypeSchema

            tiles: MetaOapg.properties.tiles
            filters: 'DashboardFilters'

            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tiles"]) -> MetaOapg.properties.tiles: ...

            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["filters"]) -> 'DashboardFilters': ...

            def __getitem__(self, name: typing.Union[typing_extensions.Literal["tiles"], typing_extensions.Literal["filters"], ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)

            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tiles"]) -> MetaOapg.properties.tiles: ...

            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> 'DashboardFilters': ...

            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tiles"], typing_extensions.Literal["filters"], ]):
                return super().get_item_oapg(name)

            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                tiles: typing.Union[MetaOapg.properties.tiles, list, tuple, ],
                filters: 'DashboardFilters',
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    tiles=tiles,
                    filters=filters,
                    _configuration=_configuration,
                )


        class one_of_2(
            schemas.DictSchema
        ):


            class MetaOapg:
                required = {
                    "tiles",
                    "name",
                    "filters",
                }

                class properties:
                    name = schemas.StrSchema


                    class description(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):


                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'description':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )


                    class tiles(
                        schemas.ListSchema
                    ):


                        class MetaOapg:

                            @staticmethod
                            def items() -> typing.Type['CreateDashboardTile']:
                                return CreateDashboardTile

                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['CreateDashboardTile'], typing.List['CreateDashboardTile']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'tiles':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )

                        def __getitem__(self, i: int) -> 'CreateDashboardTile':
                            return super().__getitem__(i)

                    @staticmethod
                    def filters() -> typing.Type['DashboardFilters']:
                        return DashboardFilters
                    __annotations__ = {
                        "name": name,
                        "description": description,
                        "tiles": tiles,
                        "filters": filters,
                    }
                additional_properties = schemas.NotAnyTypeSchema

            tiles: MetaOapg.properties.tiles
            name: MetaOapg.properties.name
            filters: 'DashboardFilters'

            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tiles"]) -> MetaOapg.properties.tiles: ...

            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["filters"]) -> 'DashboardFilters': ...

            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...

            def __getitem__(self, name: typing.Union[typing_extensions.Literal["tiles"], typing_extensions.Literal["name"], typing_extensions.Literal["filters"], typing_extensions.Literal["description"], ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)

            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tiles"]) -> MetaOapg.properties.tiles: ...

            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> 'DashboardFilters': ...

            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...

            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tiles"], typing_extensions.Literal["name"], typing_extensions.Literal["filters"], typing_extensions.Literal["description"], ]):
                return super().get_item_oapg(name)

            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                tiles: typing.Union[MetaOapg.properties.tiles, list, tuple, ],
                name: typing.Union[MetaOapg.properties.name, str, ],
                filters: 'DashboardFilters',
                description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_2':
                return super().__new__(
                    cls,
                    *_args,
                    tiles=tiles,
                    name=name,
                    filters=filters,
                    description=description,
                    _configuration=_configuration,
                )

        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
                cls.one_of_2,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateDashboard':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from lightdash_client.model.create_dashboard_tile import CreateDashboardTile
from lightdash_client.model.dashboard_filters import DashboardFilters
