# coding: utf-8

"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class Job(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "jobStatus",
            "jobUuid",
            "jobType",
            "steps",
            "updatedAt",
        }

        class properties:
            jobUuid = schemas.UUIDSchema


            class createdAt(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):


                class MetaOapg:
                    format = 'date-time'


                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'createdAt':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            updatedAt = schemas.DateTimeSchema


            class jobStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):

                @schemas.classproperty
                def STARTED(cls):
                    return cls("STARTED")

                @schemas.classproperty
                def DONE(cls):
                    return cls("DONE")

                @schemas.classproperty
                def RUNNING(cls):
                    return cls("RUNNING")

                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")


            class jobType(
                schemas.EnumBase,
                schemas.StrSchema
            ):

                @schemas.classproperty
                def COMPILE_PROJECT(cls):
                    return cls("COMPILE_PROJECT")

                @schemas.classproperty
                def CREATE_PROJECT(cls):
                    return cls("CREATE_PROJECT")


            class steps(
                schemas.ListSchema
            ):


                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['Step']:
                        return Step

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Step'], typing.List['Step']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'steps':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'Step':
                    return super().__getitem__(i)


            class projectUuid(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):


                class MetaOapg:
                    format = 'uuid'


                def __new__(
                    cls,
                    *_args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'projectUuid':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )


            class jobResults(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):


                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'jobResults':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "jobUuid": jobUuid,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "jobStatus": jobStatus,
                "jobType": jobType,
                "steps": steps,
                "projectUuid": projectUuid,
                "jobResults": jobResults,
            }

    createdAt: MetaOapg.properties.createdAt
    jobStatus: MetaOapg.properties.jobStatus
    jobUuid: MetaOapg.properties.jobUuid
    jobType: MetaOapg.properties.jobType
    steps: MetaOapg.properties.steps
    updatedAt: MetaOapg.properties.updatedAt

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobUuid"]) -> MetaOapg.properties.jobUuid: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobStatus"]) -> MetaOapg.properties.jobStatus: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobType"]) -> MetaOapg.properties.jobType: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["steps"]) -> MetaOapg.properties.steps: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectUuid"]) -> MetaOapg.properties.projectUuid: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobResults"]) -> MetaOapg.properties.jobResults: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobUuid", "createdAt", "updatedAt", "jobStatus", "jobType", "steps", "projectUuid", "jobResults", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobUuid"]) -> MetaOapg.properties.jobUuid: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobStatus"]) -> MetaOapg.properties.jobStatus: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobType"]) -> MetaOapg.properties.jobType: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["steps"]) -> MetaOapg.properties.steps: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectUuid"]) -> typing.Union[MetaOapg.properties.projectUuid, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobResults"]) -> typing.Union[MetaOapg.properties.jobResults, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobUuid", "createdAt", "updatedAt", "jobStatus", "jobType", "steps", "projectUuid", "jobResults", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, None, str, datetime, ],
        jobStatus: typing.Union[MetaOapg.properties.jobStatus, str, ],
        jobUuid: typing.Union[MetaOapg.properties.jobUuid, str, uuid.UUID, ],
        jobType: typing.Union[MetaOapg.properties.jobType, str, ],
        steps: typing.Union[MetaOapg.properties.steps, list, tuple, ],
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, ],
        projectUuid: typing.Union[MetaOapg.properties.projectUuid, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        jobResults: typing.Union[MetaOapg.properties.jobResults, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Job':
        return super().__new__(
            cls,
            *_args,
            createdAt=createdAt,
            jobStatus=jobStatus,
            jobUuid=jobUuid,
            jobType=jobType,
            steps=steps,
            updatedAt=updatedAt,
            projectUuid=projectUuid,
            jobResults=jobResults,
            _configuration=_configuration,
            **kwargs,
        )

from lightdash_client.model.step import Step
