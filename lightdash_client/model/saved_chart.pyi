# coding: utf-8

"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class SavedChart(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "spaceName",
            "tableConfig",
            "chartConfig",
            "metricQuery",
            "spaceUuid",
            "name",
            "uuid",
            "projectUuid",
            "tableName",
            "updatedAt",
        }

        class properties:
            uuid = schemas.StrSchema
            projectUuid = schemas.StrSchema
            name = schemas.StrSchema
            tableName = schemas.StrSchema
            metricQuery = schemas.DictSchema

            @staticmethod
            def chartConfig() -> typing.Type['ChartConfig']:
                return ChartConfig


            class tableConfig(
                schemas.DictSchema
            ):


                class MetaOapg:
                    required = {
                        "columnOrder",
                    }

                    class properties:


                        class columnOrder(
                            schemas.ListSchema
                        ):


                            class MetaOapg:
                                items = schemas.StrSchema

                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'columnOrder':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "columnOrder": columnOrder,
                        }
                    additional_properties = schemas.NotAnyTypeSchema

                columnOrder: MetaOapg.properties.columnOrder

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["columnOrder"]) -> MetaOapg.properties.columnOrder: ...

                def __getitem__(self, name: typing.Union[typing_extensions.Literal["columnOrder"], ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)

                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["columnOrder"]) -> MetaOapg.properties.columnOrder: ...

                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["columnOrder"], ]):
                    return super().get_item_oapg(name)

                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    columnOrder: typing.Union[MetaOapg.properties.columnOrder, list, tuple, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tableConfig':
                    return super().__new__(
                        cls,
                        *_args,
                        columnOrder=columnOrder,
                        _configuration=_configuration,
                    )
            updatedAt = schemas.DateTimeSchema
            spaceUuid = schemas.StrSchema
            spaceName = schemas.StrSchema


            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):


                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            @staticmethod
            def updatedByUser() -> typing.Type['UpdatedByUser']:
                return UpdatedByUser


            class pivotConfig(
                schemas.DictSchema
            ):


                class MetaOapg:
                    required = {
                        "columns",
                    }

                    class properties:


                        class columns(
                            schemas.ListSchema
                        ):


                            class MetaOapg:
                                items = schemas.StrSchema

                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'columns':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )

                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "columns": columns,
                        }

                columns: MetaOapg.properties.columns

                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["columns"]) -> MetaOapg.properties.columns: ...

                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

                def __getitem__(self, name: typing.Union[typing_extensions.Literal["columns", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)


                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["columns"]) -> MetaOapg.properties.columns: ...

                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["columns", ], str]):
                    return super().get_item_oapg(name)


                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    columns: typing.Union[MetaOapg.properties.columns, list, tuple, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'pivotConfig':
                    return super().__new__(
                        cls,
                        *_args,
                        columns=columns,
                        _configuration=_configuration,
                        **kwargs,
                    )
            pinnedListUuid = schemas.StrSchema
            __annotations__ = {
                "uuid": uuid,
                "projectUuid": projectUuid,
                "name": name,
                "tableName": tableName,
                "metricQuery": metricQuery,
                "chartConfig": chartConfig,
                "tableConfig": tableConfig,
                "updatedAt": updatedAt,
                "spaceUuid": spaceUuid,
                "spaceName": spaceName,
                "description": description,
                "updatedByUser": updatedByUser,
                "pivotConfig": pivotConfig,
                "pinnedListUuid": pinnedListUuid,
            }
        additional_properties = schemas.NotAnyTypeSchema

    spaceName: MetaOapg.properties.spaceName
    tableConfig: MetaOapg.properties.tableConfig
    chartConfig: 'ChartConfig'
    metricQuery: MetaOapg.properties.metricQuery
    spaceUuid: MetaOapg.properties.spaceUuid
    name: MetaOapg.properties.name
    uuid: MetaOapg.properties.uuid
    projectUuid: MetaOapg.properties.projectUuid
    tableName: MetaOapg.properties.tableName
    updatedAt: MetaOapg.properties.updatedAt

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spaceName"]) -> MetaOapg.properties.spaceName: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tableConfig"]) -> MetaOapg.properties.tableConfig: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chartConfig"]) -> 'ChartConfig': ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metricQuery"]) -> MetaOapg.properties.metricQuery: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spaceUuid"]) -> MetaOapg.properties.spaceUuid: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectUuid"]) -> MetaOapg.properties.projectUuid: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tableName"]) -> MetaOapg.properties.tableName: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedByUser"]) -> 'UpdatedByUser': ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pivotConfig"]) -> MetaOapg.properties.pivotConfig: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinnedListUuid"]) -> MetaOapg.properties.pinnedListUuid: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["spaceName"], typing_extensions.Literal["tableConfig"], typing_extensions.Literal["chartConfig"], typing_extensions.Literal["metricQuery"], typing_extensions.Literal["spaceUuid"], typing_extensions.Literal["name"], typing_extensions.Literal["uuid"], typing_extensions.Literal["projectUuid"], typing_extensions.Literal["tableName"], typing_extensions.Literal["updatedAt"], typing_extensions.Literal["description"], typing_extensions.Literal["updatedByUser"], typing_extensions.Literal["pivotConfig"], typing_extensions.Literal["pinnedListUuid"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spaceName"]) -> MetaOapg.properties.spaceName: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tableConfig"]) -> MetaOapg.properties.tableConfig: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chartConfig"]) -> 'ChartConfig': ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metricQuery"]) -> MetaOapg.properties.metricQuery: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spaceUuid"]) -> MetaOapg.properties.spaceUuid: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectUuid"]) -> MetaOapg.properties.projectUuid: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tableName"]) -> MetaOapg.properties.tableName: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedByUser"]) -> typing.Union['UpdatedByUser', schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pivotConfig"]) -> typing.Union[MetaOapg.properties.pivotConfig, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinnedListUuid"]) -> typing.Union[MetaOapg.properties.pinnedListUuid, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["spaceName"], typing_extensions.Literal["tableConfig"], typing_extensions.Literal["chartConfig"], typing_extensions.Literal["metricQuery"], typing_extensions.Literal["spaceUuid"], typing_extensions.Literal["name"], typing_extensions.Literal["uuid"], typing_extensions.Literal["projectUuid"], typing_extensions.Literal["tableName"], typing_extensions.Literal["updatedAt"], typing_extensions.Literal["description"], typing_extensions.Literal["updatedByUser"], typing_extensions.Literal["pivotConfig"], typing_extensions.Literal["pinnedListUuid"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        spaceName: typing.Union[MetaOapg.properties.spaceName, str, ],
        tableConfig: typing.Union[MetaOapg.properties.tableConfig, dict, frozendict.frozendict, ],
        chartConfig: 'ChartConfig',
        metricQuery: typing.Union[MetaOapg.properties.metricQuery, dict, frozendict.frozendict, ],
        spaceUuid: typing.Union[MetaOapg.properties.spaceUuid, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, ],
        projectUuid: typing.Union[MetaOapg.properties.projectUuid, str, ],
        tableName: typing.Union[MetaOapg.properties.tableName, str, ],
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, ],
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        updatedByUser: typing.Union['UpdatedByUser', schemas.Unset] = schemas.unset,
        pivotConfig: typing.Union[MetaOapg.properties.pivotConfig, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        pinnedListUuid: typing.Union[MetaOapg.properties.pinnedListUuid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SavedChart':
        return super().__new__(
            cls,
            *_args,
            spaceName=spaceName,
            tableConfig=tableConfig,
            chartConfig=chartConfig,
            metricQuery=metricQuery,
            spaceUuid=spaceUuid,
            name=name,
            uuid=uuid,
            projectUuid=projectUuid,
            tableName=tableName,
            updatedAt=updatedAt,
            description=description,
            updatedByUser=updatedByUser,
            pivotConfig=pivotConfig,
            pinnedListUuid=pinnedListUuid,
            _configuration=_configuration,
        )

from lightdash_client.model.chart_config import ChartConfig
from lightdash_client.model.updated_by_user import UpdatedByUser
