# coding: utf-8
"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date
from datetime import datetime

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class Dashboard(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "spaceName",
            "tiles",
            "spaceUuid",
            "name",
            "filters",
            "uuid",
            "updatedAt",
        }

        class properties:
            uuid = schemas.UUIDSchema
            name = schemas.StrSchema
            updatedAt = schemas.DateTimeSchema


            class tiles(
                schemas.ListSchema
            ):


                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['DashboardTile']:
                        return DashboardTile

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DashboardTile'], typing.List['DashboardTile']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tiles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'DashboardTile':
                    return super().__getitem__(i)

            @staticmethod
            def filters() -> typing.Type['DashboardFilters']:
                return DashboardFilters
            spaceUuid = schemas.StrSchema
            spaceName = schemas.StrSchema


            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):


                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )

            @staticmethod
            def updatedByUser() -> typing.Type['UpdatedByUser']:
                return UpdatedByUser
            pinnedListUuid = schemas.StrSchema
            __annotations__ = {
                "uuid": uuid,
                "name": name,
                "updatedAt": updatedAt,
                "tiles": tiles,
                "filters": filters,
                "spaceUuid": spaceUuid,
                "spaceName": spaceName,
                "description": description,
                "updatedByUser": updatedByUser,
                "pinnedListUuid": pinnedListUuid,
            }
        additional_properties = schemas.NotAnyTypeSchema

    spaceName: MetaOapg.properties.spaceName
    tiles: MetaOapg.properties.tiles
    spaceUuid: MetaOapg.properties.spaceUuid
    name: MetaOapg.properties.name
    filters: 'DashboardFilters'
    uuid: MetaOapg.properties.uuid
    updatedAt: MetaOapg.properties.updatedAt

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spaceName"]) -> MetaOapg.properties.spaceName: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tiles"]) -> MetaOapg.properties.tiles: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spaceUuid"]) -> MetaOapg.properties.spaceUuid: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filters"]) -> 'DashboardFilters': ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedByUser"]) -> 'UpdatedByUser': ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinnedListUuid"]) -> MetaOapg.properties.pinnedListUuid: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["spaceName"], typing_extensions.Literal["tiles"], typing_extensions.Literal["spaceUuid"], typing_extensions.Literal["name"], typing_extensions.Literal["filters"], typing_extensions.Literal["uuid"], typing_extensions.Literal["updatedAt"], typing_extensions.Literal["description"], typing_extensions.Literal["updatedByUser"], typing_extensions.Literal["pinnedListUuid"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spaceName"]) -> MetaOapg.properties.spaceName: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tiles"]) -> MetaOapg.properties.tiles: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spaceUuid"]) -> MetaOapg.properties.spaceUuid: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> 'DashboardFilters': ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedByUser"]) -> typing.Union['UpdatedByUser', schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinnedListUuid"]) -> typing.Union[MetaOapg.properties.pinnedListUuid, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["spaceName"], typing_extensions.Literal["tiles"], typing_extensions.Literal["spaceUuid"], typing_extensions.Literal["name"], typing_extensions.Literal["filters"], typing_extensions.Literal["uuid"], typing_extensions.Literal["updatedAt"], typing_extensions.Literal["description"], typing_extensions.Literal["updatedByUser"], typing_extensions.Literal["pinnedListUuid"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        spaceName: typing.Union[MetaOapg.properties.spaceName, str, ],
        tiles: typing.Union[MetaOapg.properties.tiles, list, tuple, ],
        spaceUuid: typing.Union[MetaOapg.properties.spaceUuid, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        filters: 'DashboardFilters',
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, ],
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, ],
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        updatedByUser: typing.Union['UpdatedByUser', schemas.Unset] = schemas.unset,
        pinnedListUuid: typing.Union[MetaOapg.properties.pinnedListUuid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Dashboard':
        return super().__new__(
            cls,
            *_args,
            spaceName=spaceName,
            tiles=tiles,
            spaceUuid=spaceUuid,
            name=name,
            filters=filters,
            uuid=uuid,
            updatedAt=updatedAt,
            description=description,
            updatedByUser=updatedByUser,
            pinnedListUuid=pinnedListUuid,
            _configuration=_configuration,
        )

from lightdash_client.model.dashboard_filters import DashboardFilters
from lightdash_client.model.dashboard_tile import DashboardTile
from lightdash_client.model.updated_by_user import UpdatedByUser
