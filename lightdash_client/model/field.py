# coding: utf-8
"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date
from datetime import datetime

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class Field(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "tableLabel",
            "label",
            "type",
            "fieldType",
            "table",
            "sql",
        }

        class properties:
            fieldType = schemas.StrSchema
            type = schemas.StrSchema
            name = schemas.StrSchema
            label = schemas.StrSchema
            table = schemas.StrSchema
            tableLabel = schemas.StrSchema
            sql = schemas.StrSchema
            description = schemas.StrSchema
            __annotations__ = {
                "fieldType": fieldType,
                "type": type,
                "name": name,
                "label": label,
                "table": table,
                "tableLabel": tableLabel,
                "sql": sql,
                "description": description,
            }

    name: MetaOapg.properties.name
    tableLabel: MetaOapg.properties.tableLabel
    label: MetaOapg.properties.label
    type: MetaOapg.properties.type
    fieldType: MetaOapg.properties.fieldType
    table: MetaOapg.properties.table
    sql: MetaOapg.properties.sql

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldType"]) -> MetaOapg.properties.fieldType: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["table"]) -> MetaOapg.properties.table: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tableLabel"]) -> MetaOapg.properties.tableLabel: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sql"]) -> MetaOapg.properties.sql: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fieldType", "type", "name", "label", "table", "tableLabel", "sql", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldType"]) -> MetaOapg.properties.fieldType: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["table"]) -> MetaOapg.properties.table: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tableLabel"]) -> MetaOapg.properties.tableLabel: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sql"]) -> MetaOapg.properties.sql: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fieldType", "type", "name", "label", "table", "tableLabel", "sql", "description", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        tableLabel: typing.Union[MetaOapg.properties.tableLabel, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        fieldType: typing.Union[MetaOapg.properties.fieldType, str, ],
        table: typing.Union[MetaOapg.properties.table, str, ],
        sql: typing.Union[MetaOapg.properties.sql, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Field':
        return super().__new__(
            cls,
            *_args,
            name=name,
            tableLabel=tableLabel,
            label=label,
            type=type,
            fieldType=fieldType,
            table=table,
            sql=sql,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )
