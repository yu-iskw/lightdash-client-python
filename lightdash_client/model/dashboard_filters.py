# coding: utf-8
"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date
from datetime import datetime

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class DashboardFilters(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "metrics",
            "dimensions",
        }

        class properties:


            class dimensions(
                schemas.ListSchema
            ):


                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['DashboardFilterRule']:
                        return DashboardFilterRule

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DashboardFilterRule'], typing.List['DashboardFilterRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dimensions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'DashboardFilterRule':
                    return super().__getitem__(i)


            class metrics(
                schemas.ListSchema
            ):


                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['DashboardFilterRule']:
                        return DashboardFilterRule

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DashboardFilterRule'], typing.List['DashboardFilterRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metrics':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'DashboardFilterRule':
                    return super().__getitem__(i)
            __annotations__ = {
                "dimensions": dimensions,
                "metrics": metrics,
            }
        additional_properties = schemas.NotAnyTypeSchema

    metrics: MetaOapg.properties.metrics
    dimensions: MetaOapg.properties.dimensions

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metrics"]) -> MetaOapg.properties.metrics: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dimensions"]) -> MetaOapg.properties.dimensions: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["metrics"], typing_extensions.Literal["dimensions"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metrics"]) -> MetaOapg.properties.metrics: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dimensions"]) -> MetaOapg.properties.dimensions: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metrics"], typing_extensions.Literal["dimensions"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        metrics: typing.Union[MetaOapg.properties.metrics, list, tuple, ],
        dimensions: typing.Union[MetaOapg.properties.dimensions, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DashboardFilters':
        return super().__new__(
            cls,
            *_args,
            metrics=metrics,
            dimensions=dimensions,
            _configuration=_configuration,
        )

from lightdash_client.model.dashboard_filter_rule import DashboardFilterRule
