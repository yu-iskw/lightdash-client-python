# coding: utf-8
"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import uuid  # noqa: F401
from datetime import date
from datetime import datetime

import frozendict  # noqa: F401
import typing_extensions  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class InviteLink(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "inviteUrl",
            "inviteCode",
            "expiresAt",
        }

        class properties:
            expiresAt = schemas.DateTimeSchema
            inviteCode = schemas.StrSchema
            inviteUrl = schemas.StrSchema
            __annotations__ = {
                "expiresAt": expiresAt,
                "inviteCode": inviteCode,
                "inviteUrl": inviteUrl,
            }

    inviteUrl: MetaOapg.properties.inviteUrl
    inviteCode: MetaOapg.properties.inviteCode
    expiresAt: MetaOapg.properties.expiresAt

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresAt"]) -> MetaOapg.properties.expiresAt: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inviteCode"]) -> MetaOapg.properties.inviteCode: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inviteUrl"]) -> MetaOapg.properties.inviteUrl: ...

    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expiresAt", "inviteCode", "inviteUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)


    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresAt"]) -> MetaOapg.properties.expiresAt: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inviteCode"]) -> MetaOapg.properties.inviteCode: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inviteUrl"]) -> MetaOapg.properties.inviteUrl: ...

    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expiresAt", "inviteCode", "inviteUrl", ], str]):
        return super().get_item_oapg(name)


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        inviteUrl: typing.Union[MetaOapg.properties.inviteUrl, str, ],
        inviteCode: typing.Union[MetaOapg.properties.inviteCode, str, ],
        expiresAt: typing.Union[MetaOapg.properties.expiresAt, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InviteLink':
        return super().__new__(
            cls,
            *_args,
            inviteUrl=inviteUrl,
            inviteCode=inviteCode,
            expiresAt=expiresAt,
            _configuration=_configuration,
            **kwargs,
        )
