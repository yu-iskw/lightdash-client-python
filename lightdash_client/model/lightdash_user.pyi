# coding: utf-8

"""
    Lightdash API

    API spec for Lightdash server  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@lightdash.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lightdash_client import schemas  # noqa: F401


class LightdashUser(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "firstName",
            "isTrackingAnonymized",
            "lastName",
            "organizationUuid",
            "role",
            "organizationName",
            "isMarketingOptedIn",
            "userUuid",
            "isSetupComplete",
        }

        class properties:
            userUuid = schemas.StrSchema
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            organizationUuid = schemas.StrSchema
            organizationName = schemas.StrSchema
            isTrackingAnonymized = schemas.BoolSchema
            isMarketingOptedIn = schemas.BoolSchema
            isSetupComplete = schemas.BoolSchema
            role = schemas.StrSchema
            email = schemas.StrSchema
            organizationCreatedAt = schemas.DateTimeSchema


            class abilityRules(
                schemas.ListSchema
            ):


                class MetaOapg:


                    class items(
                        schemas.DictSchema
                    ):


                        class MetaOapg:
                            additional_properties = schemas.AnyTypeSchema

                        def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                            # dict_instance[name] accessor
                            return super().__getitem__(name)

                        def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                            return super().get_item_oapg(name)

                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'abilityRules':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "userUuid": userUuid,
                "firstName": firstName,
                "lastName": lastName,
                "organizationUuid": organizationUuid,
                "organizationName": organizationName,
                "isTrackingAnonymized": isTrackingAnonymized,
                "isMarketingOptedIn": isMarketingOptedIn,
                "isSetupComplete": isSetupComplete,
                "role": role,
                "email": email,
                "organizationCreatedAt": organizationCreatedAt,
                "abilityRules": abilityRules,
            }
        additional_properties = schemas.NotAnyTypeSchema

    firstName: MetaOapg.properties.firstName
    isTrackingAnonymized: MetaOapg.properties.isTrackingAnonymized
    lastName: MetaOapg.properties.lastName
    organizationUuid: MetaOapg.properties.organizationUuid
    role: MetaOapg.properties.role
    organizationName: MetaOapg.properties.organizationName
    isMarketingOptedIn: MetaOapg.properties.isMarketingOptedIn
    userUuid: MetaOapg.properties.userUuid
    isSetupComplete: MetaOapg.properties.isSetupComplete

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isTrackingAnonymized"]) -> MetaOapg.properties.isTrackingAnonymized: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationUuid"]) -> MetaOapg.properties.organizationUuid: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationName"]) -> MetaOapg.properties.organizationName: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMarketingOptedIn"]) -> MetaOapg.properties.isMarketingOptedIn: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userUuid"]) -> MetaOapg.properties.userUuid: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSetupComplete"]) -> MetaOapg.properties.isSetupComplete: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationCreatedAt"]) -> MetaOapg.properties.organizationCreatedAt: ...

    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abilityRules"]) -> MetaOapg.properties.abilityRules: ...

    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstName"], typing_extensions.Literal["isTrackingAnonymized"], typing_extensions.Literal["lastName"], typing_extensions.Literal["organizationUuid"], typing_extensions.Literal["role"], typing_extensions.Literal["organizationName"], typing_extensions.Literal["isMarketingOptedIn"], typing_extensions.Literal["userUuid"], typing_extensions.Literal["isSetupComplete"], typing_extensions.Literal["email"], typing_extensions.Literal["organizationCreatedAt"], typing_extensions.Literal["abilityRules"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isTrackingAnonymized"]) -> MetaOapg.properties.isTrackingAnonymized: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationUuid"]) -> MetaOapg.properties.organizationUuid: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationName"]) -> MetaOapg.properties.organizationName: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMarketingOptedIn"]) -> MetaOapg.properties.isMarketingOptedIn: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userUuid"]) -> MetaOapg.properties.userUuid: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSetupComplete"]) -> MetaOapg.properties.isSetupComplete: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationCreatedAt"]) -> typing.Union[MetaOapg.properties.organizationCreatedAt, schemas.Unset]: ...

    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abilityRules"]) -> typing.Union[MetaOapg.properties.abilityRules, schemas.Unset]: ...

    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstName"], typing_extensions.Literal["isTrackingAnonymized"], typing_extensions.Literal["lastName"], typing_extensions.Literal["organizationUuid"], typing_extensions.Literal["role"], typing_extensions.Literal["organizationName"], typing_extensions.Literal["isMarketingOptedIn"], typing_extensions.Literal["userUuid"], typing_extensions.Literal["isSetupComplete"], typing_extensions.Literal["email"], typing_extensions.Literal["organizationCreatedAt"], typing_extensions.Literal["abilityRules"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, ],
        isTrackingAnonymized: typing.Union[MetaOapg.properties.isTrackingAnonymized, bool, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        organizationUuid: typing.Union[MetaOapg.properties.organizationUuid, str, ],
        role: typing.Union[MetaOapg.properties.role, str, ],
        organizationName: typing.Union[MetaOapg.properties.organizationName, str, ],
        isMarketingOptedIn: typing.Union[MetaOapg.properties.isMarketingOptedIn, bool, ],
        userUuid: typing.Union[MetaOapg.properties.userUuid, str, ],
        isSetupComplete: typing.Union[MetaOapg.properties.isSetupComplete, bool, ],
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        organizationCreatedAt: typing.Union[MetaOapg.properties.organizationCreatedAt, str, datetime, schemas.Unset] = schemas.unset,
        abilityRules: typing.Union[MetaOapg.properties.abilityRules, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'LightdashUser':
        return super().__new__(
            cls,
            *_args,
            firstName=firstName,
            isTrackingAnonymized=isTrackingAnonymized,
            lastName=lastName,
            organizationUuid=organizationUuid,
            role=role,
            organizationName=organizationName,
            isMarketingOptedIn=isMarketingOptedIn,
            userUuid=userUuid,
            isSetupComplete=isSetupComplete,
            email=email,
            organizationCreatedAt=organizationCreatedAt,
            abilityRules=abilityRules,
            _configuration=_configuration,
        )
