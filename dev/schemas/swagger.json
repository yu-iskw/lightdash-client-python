{
    "components": {
        "examples": {},
        "headers": {},
        "parameters": {},
        "requestBodies": {},
        "responses": {},
        "schemas": {
            "ApiErrorPayload": {
                "properties": {
                    "error": {
                        "properties": {
                            "data": {
                                "description": "Optional data containing details of the error"
                            },
                            "message": {
                                "type": "string",
                                "description": "A friendly message summarising the error"
                            },
                            "name": {
                                "type": "string",
                                "description": "Unique name for the type of error"
                            },
                            "statusCode": {
                                "type": "number",
                                "format": "integer",
                                "description": "HTTP status code"
                            }
                        },
                        "required": ["name", "statusCode"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["error"],
                        "nullable": false
                    }
                },
                "required": ["error", "status"],
                "type": "object",
                "description": "The Error object is returned from the api any time there is an error.\nThe message contains"
            },
            "ApiCsvUrlResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "status": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            }
                        },
                        "required": ["status", "url"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_CreateDbtCloudIntegration.metricsJobId_": {
                "properties": {
                    "metricsJobId": {
                        "type": "string",
                        "description": "Job id for a dbt cloud job containing a compiled dbt project with available dbt metrics"
                    }
                },
                "required": ["metricsJobId"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "DbtCloudIntegration": {
                "$ref": "#/components/schemas/Pick_CreateDbtCloudIntegration.metricsJobId_",
                "description": "Configuration for a Lightdash integration with dbt Cloud"
            },
            "ApiDbtCloudIntegrationSettings": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/DbtCloudIntegration"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["status"],
                "type": "object"
            },
            "ApiDbtCloudSettingsDeleteSuccess": {
                "properties": {
                    "results": {},
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["status"],
                "type": "object"
            },
            "DbtCloudMetric": {
                "properties": {
                    "label": {
                        "type": "string"
                    },
                    "timeGrains": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dimensions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uniqueId": {
                        "type": "string"
                    }
                },
                "required": [
                    "label",
                    "timeGrains",
                    "description",
                    "dimensions",
                    "name",
                    "uniqueId"
                ],
                "type": "object"
            },
            "DbtCloudMetadataResponseMetrics": {
                "properties": {
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/DbtCloudMetric"
                        },
                        "type": "array",
                        "description": "A list of dbt metric definitions from the dbt cloud metadata api"
                    }
                },
                "required": ["metrics"],
                "type": "object",
                "description": "Response from dbt cloud metadata api containing a list of metric definitions"
            },
            "ApiDbtCloudMetrics": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/DbtCloudMetadataResponseMetrics"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Group": {
                "properties": {
                    "organizationUuid": {
                        "type": "string",
                        "description": "The UUID of the organization that the group belongs to"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that the group was created"
                    },
                    "name": {
                        "type": "string",
                        "description": "A friendly name for the group"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The group's UUID"
                    }
                },
                "required": ["organizationUuid", "createdAt", "name", "uuid"],
                "type": "object"
            },
            "ApiGroupResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Group"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiSuccessEmpty": {
                "properties": {
                    "results": {},
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["status"],
                "type": "object"
            },
            "GroupMember": {
                "properties": {
                    "lastName": {
                        "type": "string",
                        "description": "The user's last name"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The user's first name"
                    },
                    "email": {
                        "type": "string",
                        "description": "Primary email address for the user"
                    },
                    "userUuid": {
                        "type": "string",
                        "description": "Unique id for the user",
                        "format": "uuid"
                    }
                },
                "required": ["lastName", "firstName", "email", "userUuid"],
                "type": "object",
                "description": "A summary for a Lightdash user within a group"
            },
            "ApiGroupMembersResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/GroupMember"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_Group.name_": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A friendly name for the group"
                    }
                },
                "required": ["name"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "UpdateGroup": {
                "$ref": "#/components/schemas/Pick_Group.name_"
            },
            "Organization": {
                "properties": {
                    "needsProject": {
                        "type": "boolean",
                        "description": "The organization needs a project if it doesn't have at least one project."
                    },
                    "chartColors": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "The default color palette for all projects in the organization"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the organization"
                    },
                    "organizationUuid": {
                        "type": "string",
                        "description": "The unique identifier of the organization",
                        "format": "uuid"
                    }
                },
                "required": ["name", "organizationUuid"],
                "type": "object",
                "description": "Details of a user's Organization"
            },
            "ApiOrganization": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Organization"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_Organization.name_": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the organization"
                    }
                },
                "required": ["name"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "CreateOrganization": {
                "$ref": "#/components/schemas/Pick_Organization.name_"
            },
            "Partial_Omit_Organization.organizationUuid-or-needsProject__": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the organization"
                    },
                    "chartColors": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "The default color palette for all projects in the organization"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "UpdateOrganization": {
                "$ref": "#/components/schemas/Partial_Omit_Organization.organizationUuid-or-needsProject__"
            },
            "OrganizationMemberRole": {
                "enum": [
                    "member",
                    "viewer",
                    "interactive_viewer",
                    "editor",
                    "developer",
                    "admin"
                ],
                "type": "string"
            },
            "OrganizationMemberProfile": {
                "properties": {
                    "isInviteExpired": {
                        "type": "boolean",
                        "description": "Whether the user's invite to the organization has expired"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the user has accepted their invite to the organization"
                    },
                    "role": {
                        "$ref": "#/components/schemas/OrganizationMemberRole",
                        "description": "The role of the user in the organization"
                    },
                    "organizationUuid": {
                        "type": "string",
                        "description": "Unique identifier for the organization the user is a member of"
                    },
                    "email": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "userUuid": {
                        "type": "string",
                        "description": "Unique identifier for the user",
                        "format": "uuid"
                    }
                },
                "required": [
                    "isActive",
                    "role",
                    "organizationUuid",
                    "email",
                    "lastName",
                    "firstName",
                    "userUuid"
                ],
                "type": "object",
                "description": "Profile for a user's membership in an organization"
            },
            "ApiOrganizationMemberProfiles": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/OrganizationMemberProfile"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiOrganizationMemberProfile": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/OrganizationMemberProfile"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Partial_Pick_OrganizationMemberProfile.role__": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/OrganizationMemberRole",
                        "description": "The role of the user in the organization"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "OrganizationMemberProfileUpdate": {
                "$ref": "#/components/schemas/Partial_Pick_OrganizationMemberProfile.role__"
            },
            "AllowedEmailDomains": {
                "properties": {
                    "projectUuids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "role": {
                        "$ref": "#/components/schemas/OrganizationMemberRole"
                    },
                    "emailDomains": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "organizationUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectUuids",
                    "role",
                    "emailDomains",
                    "organizationUuid"
                ],
                "type": "object"
            },
            "ApiOrganizationAllowedEmailDomains": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/AllowedEmailDomains"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_AllowedEmailDomains.Exclude_keyofAllowedEmailDomains.organizationUuid__": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/OrganizationMemberRole"
                    },
                    "emailDomains": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "projectUuids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": ["role", "emailDomains", "projectUuids"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_AllowedEmailDomains.organizationUuid_": {
                "$ref": "#/components/schemas/Pick_AllowedEmailDomains.Exclude_keyofAllowedEmailDomains.organizationUuid__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "UpdateAllowedEmailDomains": {
                "$ref": "#/components/schemas/Omit_AllowedEmailDomains.organizationUuid_"
            },
            "Pick_CreateGroup.name_": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A friendly name for the group"
                    }
                },
                "required": ["name"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ApiGroupListResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ResourceViewItemType.DASHBOARD": {
                "enum": ["dashboard"],
                "type": "string"
            },
            "UpdatedByUser": {
                "properties": {
                    "userUuid": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    }
                },
                "required": ["userUuid", "firstName", "lastName"],
                "type": "object",
                "additionalProperties": false
            },
            "Pick_ValidationResponse.error-or-createdAt-or-validationId_": {
                "properties": {
                    "validationId": {
                        "type": "number",
                        "format": "double"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "error": {
                        "type": "string"
                    }
                },
                "required": ["validationId", "createdAt", "error"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ValidationSummary": {
                "$ref": "#/components/schemas/Pick_ValidationResponse.error-or-createdAt-or-validationId_"
            },
            "Pick_DashboardBasicDetails.uuid-or-spaceUuid-or-description-or-name-or-views-or-firstViewedAt-or-pinnedListUuid-or-pinnedListOrder-or-updatedAt-or-updatedByUser-or-validationErrors_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "firstViewedAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "validationErrors": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationSummary"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "updatedAt",
                    "spaceUuid",
                    "views",
                    "firstViewedAt",
                    "pinnedListUuid",
                    "pinnedListOrder"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ResourceViewDashboardItem": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Pick_DashboardBasicDetails.uuid-or-spaceUuid-or-description-or-name-or-views-or-firstViewedAt-or-pinnedListUuid-or-pinnedListOrder-or-updatedAt-or-updatedByUser-or-validationErrors_"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ResourceViewItemType.DASHBOARD"
                    }
                },
                "required": ["data", "type"],
                "type": "object"
            },
            "ResourceViewItemType.CHART": {
                "enum": ["chart"],
                "type": "string"
            },
            "ChartKind": {
                "enum": [
                    "line",
                    "horizontal_bar",
                    "vertical_bar",
                    "scatter",
                    "area",
                    "mixed",
                    "table",
                    "big_number"
                ],
                "type": "string"
            },
            "Pick_SpaceQuery.uuid-or-name-or-chartType-or-firstViewedAt-or-views-or-pinnedListUuid-or-pinnedListOrder-or-spaceUuid-or-description-or-updatedAt-or-updatedByUser-or-validationErrors_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "firstViewedAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "validationErrors": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationSummary"
                        },
                        "type": "array"
                    },
                    "chartType": {
                        "$ref": "#/components/schemas/ChartKind"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "updatedAt",
                    "spaceUuid",
                    "views",
                    "firstViewedAt",
                    "pinnedListUuid",
                    "pinnedListOrder"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ResourceViewChartItem": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Pick_SpaceQuery.uuid-or-name-or-chartType-or-firstViewedAt-or-views-or-pinnedListUuid-or-pinnedListOrder-or-spaceUuid-or-description-or-updatedAt-or-updatedByUser-or-validationErrors_"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ResourceViewItemType.CHART"
                    }
                },
                "required": ["data", "type"],
                "type": "object"
            },
            "ResourceViewItemType.SPACE": {
                "enum": ["space"],
                "type": "string"
            },
            "Pick_Space.projectUuid-or-uuid-or-name-or-isPrivate-or-pinnedListUuid-or-pinnedListOrder-or-organizationUuid_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "isPrivate": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "organizationUuid",
                    "uuid",
                    "projectUuid",
                    "pinnedListUuid",
                    "pinnedListOrder",
                    "isPrivate"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ResourceViewSpaceItem": {
                "properties": {
                    "data": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_Space.projectUuid-or-uuid-or-name-or-isPrivate-or-pinnedListUuid-or-pinnedListOrder-or-organizationUuid_"
                            },
                            {
                                "properties": {
                                    "chartCount": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "dashboardCount": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "accessListLength": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "access": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "chartCount",
                                    "dashboardCount",
                                    "accessListLength",
                                    "access"
                                ],
                                "type": "object"
                            }
                        ]
                    },
                    "type": {
                        "$ref": "#/components/schemas/ResourceViewItemType.SPACE"
                    }
                },
                "required": ["data", "type"],
                "type": "object"
            },
            "PinnedItems": {
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#/components/schemas/ResourceViewDashboardItem"
                        },
                        {
                            "$ref": "#/components/schemas/ResourceViewChartItem"
                        },
                        {
                            "$ref": "#/components/schemas/ResourceViewSpaceItem"
                        }
                    ]
                },
                "type": "array"
            },
            "ApiPinnedItems": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/PinnedItems"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ResourceViewItemType": {
                "enum": ["chart", "dashboard", "space"],
                "type": "string"
            },
            "Pick_ResourceViewItem-at-data.uuid-or-pinnedListOrder_": {
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": ["uuid", "pinnedListOrder"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "UpdatePinnedItemOrder": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Pick_ResourceViewItem-at-data.uuid-or-pinnedListOrder_"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ResourceViewItemType"
                    }
                },
                "required": ["data", "type"],
                "type": "object"
            },
            "Pick_SavedChart.uuid-or-name-or-description-or-spaceName-or-spaceUuid-or-projectUuid-or-organizationUuid-or-pinnedListUuid_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "spaceName": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "organizationUuid",
                    "uuid",
                    "projectUuid",
                    "spaceUuid",
                    "pinnedListUuid",
                    "spaceName"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ChartType": {
                "enum": ["cartesian", "table", "big_number"],
                "type": "string"
            },
            "ChartSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_SavedChart.uuid-or-name-or-description-or-spaceName-or-spaceUuid-or-projectUuid-or-organizationUuid-or-pinnedListUuid_"
                    },
                    {
                        "properties": {
                            "chartType": {
                                "$ref": "#/components/schemas/ChartType"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ApiChartSummaryListResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ChartSummary"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_Space.organizationUuid-or-projectUuid-or-uuid-or-name-or-isPrivate_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "isPrivate": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "organizationUuid",
                    "uuid",
                    "projectUuid",
                    "isPrivate"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "SpaceSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_Space.organizationUuid-or-projectUuid-or-uuid-or-name-or-isPrivate_"
                    },
                    {
                        "properties": {
                            "access": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": ["access"],
                        "type": "object"
                    }
                ]
            },
            "ApiSpaceSummaryListResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceSummary"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ProjectMemberRole": {
                "enum": [
                    "viewer",
                    "interactive_viewer",
                    "editor",
                    "developer",
                    "admin"
                ],
                "type": "string"
            },
            "ProjectMemberProfile": {
                "properties": {
                    "lastName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "userUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "lastName",
                    "firstName",
                    "email",
                    "role",
                    "projectUuid",
                    "userUuid"
                ],
                "type": "object"
            },
            "ApiProjectAccessListResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ProjectMemberProfile"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "CreateProjectMember": {
                "properties": {
                    "sendEmail": {
                        "type": "boolean"
                    },
                    "role": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    },
                    "email": {
                        "type": "string"
                    }
                },
                "required": ["sendEmail", "role", "email"],
                "type": "object"
            },
            "UpdateProjectMember": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    }
                },
                "required": ["role"],
                "type": "object"
            },
            "FieldId": {
                "type": "string"
            },
            "FilterGroupResponse": {
                "anyOf": [
                    {
                        "properties": {
                            "or": {
                                "items": {},
                                "type": "array"
                            },
                            "id": {
                                "type": "string"
                            }
                        },
                        "required": ["or", "id"],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "and": {
                                "items": {},
                                "type": "array"
                            },
                            "id": {
                                "type": "string"
                            }
                        },
                        "required": ["and", "id"],
                        "type": "object"
                    }
                ]
            },
            "Filters": {
                "properties": {
                    "metrics": {
                        "$ref": "#/components/schemas/FilterGroupResponse"
                    },
                    "dimensions": {
                        "$ref": "#/components/schemas/FilterGroupResponse"
                    }
                },
                "type": "object"
            },
            "SortField": {
                "properties": {
                    "descending": {
                        "type": "boolean"
                    },
                    "fieldId": {
                        "type": "string"
                    }
                },
                "required": ["descending", "fieldId"],
                "type": "object"
            },
            "TableCalculation": {
                "properties": {
                    "sql": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "index": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": ["sql", "displayName", "name"],
                "type": "object"
            },
            "MetricType": {
                "enum": [
                    "percentile",
                    "average",
                    "count",
                    "count_distinct",
                    "sum",
                    "min",
                    "max",
                    "number",
                    "median",
                    "string",
                    "date",
                    "boolean"
                ],
                "type": "string"
            },
            "Compact": {
                "enum": ["thousands", "millions", "billions", "trillions"],
                "type": "string"
            },
            "CompactOrAlias": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/Compact"
                    },
                    {
                        "type": "string",
                        "enum": [
                            "K",
                            "thousand",
                            "M",
                            "million",
                            "B",
                            "billion",
                            "T",
                            "trillion"
                        ]
                    }
                ]
            },
            "AdditionalMetric": {
                "properties": {
                    "label": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/MetricType"
                    },
                    "description": {
                        "type": "string"
                    },
                    "sql": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "round": {
                        "type": "number",
                        "format": "double"
                    },
                    "compact": {
                        "$ref": "#/components/schemas/CompactOrAlias"
                    },
                    "format": {
                        "type": "string"
                    },
                    "table": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "index": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": ["type", "sql", "table", "name"],
                "type": "object",
                "additionalProperties": false
            },
            "MetricQueryResponse": {
                "properties": {
                    "additionalMetrics": {
                        "items": {
                            "$ref": "#/components/schemas/AdditionalMetric"
                        },
                        "type": "array"
                    },
                    "tableCalculations": {
                        "items": {
                            "$ref": "#/components/schemas/TableCalculation"
                        },
                        "type": "array"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "sorts": {
                        "items": {
                            "$ref": "#/components/schemas/SortField"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "$ref": "#/components/schemas/Filters"
                    },
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/FieldId"
                        },
                        "type": "array"
                    },
                    "dimensions": {
                        "items": {
                            "$ref": "#/components/schemas/FieldId"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "tableCalculations",
                    "limit",
                    "sorts",
                    "filters",
                    "metrics",
                    "dimensions"
                ],
                "type": "object"
            },
            "ApiRunQueryResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "rows": {
                                "items": {},
                                "type": "array"
                            },
                            "metricQuery": {
                                "$ref": "#/components/schemas/MetricQueryResponse"
                            }
                        },
                        "required": ["rows", "metricQuery"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "RunQueryRequest": {
                "properties": {
                    "csvLimit": {
                        "type": "number",
                        "format": "double"
                    },
                    "additionalMetrics": {
                        "items": {
                            "$ref": "#/components/schemas/AdditionalMetric"
                        },
                        "type": "array"
                    },
                    "tableCalculations": {
                        "items": {
                            "$ref": "#/components/schemas/TableCalculation"
                        },
                        "type": "array"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "sorts": {
                        "items": {
                            "$ref": "#/components/schemas/SortField"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "properties": {
                            "metrics": {},
                            "dimensions": {}
                        },
                        "type": "object"
                    },
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/FieldId"
                        },
                        "type": "array"
                    },
                    "dimensions": {
                        "items": {
                            "$ref": "#/components/schemas/FieldId"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "tableCalculations",
                    "limit",
                    "sorts",
                    "filters",
                    "metrics",
                    "dimensions"
                ],
                "type": "object"
            },
            "SchedulerFormat": {
                "enum": ["csv", "image"],
                "type": "string"
            },
            "SchedulerCsvOptions": {
                "properties": {
                    "limit": {
                        "anyOf": [
                            {
                                "type": "number",
                                "format": "double"
                            },
                            {
                                "type": "string",
                                "enum": ["table", "all"]
                            }
                        ]
                    },
                    "formatted": {
                        "type": "boolean"
                    }
                },
                "required": ["limit", "formatted"],
                "type": "object"
            },
            "SchedulerImageOptions": {
                "properties": {},
                "type": "object"
            },
            "SchedulerOptions": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/SchedulerCsvOptions"
                    },
                    {
                        "$ref": "#/components/schemas/SchedulerImageOptions"
                    }
                ]
            },
            "SchedulerBase": {
                "properties": {
                    "options": {
                        "$ref": "#/components/schemas/SchedulerOptions"
                    },
                    "dashboardUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "savedChartUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "cron": {
                        "type": "string"
                    },
                    "format": {
                        "$ref": "#/components/schemas/SchedulerFormat"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "schedulerUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "options",
                    "dashboardUuid",
                    "savedChartUuid",
                    "cron",
                    "format",
                    "createdBy",
                    "updatedAt",
                    "createdAt",
                    "name",
                    "schedulerUuid"
                ],
                "type": "object"
            },
            "ChartScheduler": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SchedulerBase"
                    },
                    {
                        "properties": {
                            "dashboardUuid": {
                                "type": "number",
                                "enum": [null],
                                "nullable": true
                            },
                            "savedChartUuid": {
                                "type": "string"
                            }
                        },
                        "required": ["dashboardUuid", "savedChartUuid"],
                        "type": "object"
                    }
                ]
            },
            "DashboardScheduler": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SchedulerBase"
                    },
                    {
                        "properties": {
                            "dashboardUuid": {
                                "type": "string"
                            },
                            "savedChartUuid": {
                                "type": "number",
                                "enum": [null],
                                "nullable": true
                            }
                        },
                        "required": ["dashboardUuid", "savedChartUuid"],
                        "type": "object"
                    }
                ]
            },
            "Scheduler": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/ChartScheduler"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardScheduler"
                    }
                ]
            },
            "SchedulerSlackTarget": {
                "properties": {
                    "channel": {
                        "type": "string"
                    },
                    "schedulerUuid": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "schedulerSlackTargetUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "channel",
                    "schedulerUuid",
                    "updatedAt",
                    "createdAt",
                    "schedulerSlackTargetUuid"
                ],
                "type": "object"
            },
            "SchedulerEmailTarget": {
                "properties": {
                    "recipient": {
                        "type": "string"
                    },
                    "schedulerUuid": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "schedulerEmailTargetUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "recipient",
                    "schedulerUuid",
                    "updatedAt",
                    "createdAt",
                    "schedulerEmailTargetUuid"
                ],
                "type": "object"
            },
            "SchedulerAndTargets": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Scheduler"
                    },
                    {
                        "properties": {
                            "targets": {
                                "items": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/SchedulerSlackTarget"
                                        },
                                        {
                                            "$ref": "#/components/schemas/SchedulerEmailTarget"
                                        }
                                    ]
                                },
                                "type": "array"
                            }
                        },
                        "required": ["targets"],
                        "type": "object"
                    }
                ]
            },
            "SchedulerJobStatus": {
                "enum": ["scheduled", "started", "completed", "error"],
                "type": "string"
            },
            "Record_string.any_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "SchedulerLog": {
                "properties": {
                    "details": {
                        "$ref": "#/components/schemas/Record_string.any_"
                    },
                    "targetType": {
                        "type": "string",
                        "enum": ["email", "slack"]
                    },
                    "target": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SchedulerJobStatus"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "scheduledTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "jobGroup": {
                        "type": "string"
                    },
                    "jobId": {
                        "type": "string"
                    },
                    "schedulerUuid": {
                        "type": "string"
                    },
                    "task": {
                        "type": "string",
                        "enum": [
                            "handleScheduledDelivery",
                            "sendEmailNotification",
                            "sendSlackNotification",
                            "downloadCsv",
                            "compileProject",
                            "testAndCompileProject",
                            "validateProject"
                        ]
                    }
                },
                "required": [
                    "status",
                    "createdAt",
                    "scheduledTime",
                    "jobId",
                    "task"
                ],
                "type": "object"
            },
            "SchedulerWithLogs": {
                "properties": {
                    "logs": {
                        "items": {
                            "$ref": "#/components/schemas/SchedulerLog"
                        },
                        "type": "array"
                    },
                    "dashboards": {
                        "items": {
                            "properties": {
                                "dashboardUuid": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": ["dashboardUuid", "name"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "charts": {
                        "items": {
                            "properties": {
                                "savedChartUuid": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": ["savedChartUuid", "name"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "users": {
                        "items": {
                            "properties": {
                                "userUuid": {
                                    "type": "string"
                                },
                                "lastName": {
                                    "type": "string"
                                },
                                "firstName": {
                                    "type": "string"
                                }
                            },
                            "required": ["userUuid", "lastName", "firstName"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "schedulers": {
                        "items": {
                            "$ref": "#/components/schemas/SchedulerAndTargets"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "logs",
                    "dashboards",
                    "charts",
                    "users",
                    "schedulers"
                ],
                "type": "object"
            },
            "ApiSchedulerLogsResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/SchedulerWithLogs"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiSchedulerAndTargetsResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/SchedulerAndTargets"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ScheduledJobs": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": ["id", "date"],
                "type": "object"
            },
            "ApiScheduledJobsResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ScheduledJobs"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiJobStatusResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "status": {
                                "type": "string"
                            }
                        },
                        "required": ["status"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ShareUrl": {
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "shareUrl": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "createdByUserUuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "params": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The URL path of the full URL"
                    },
                    "nanoid": {
                        "type": "string",
                        "description": "Unique shareable id"
                    }
                },
                "required": ["params", "path", "nanoid"],
                "type": "object",
                "description": "A ShareUrl maps a short shareable id to a full URL\nin the Lightdash UI. This allows very long URLs\nto be represented by short ids."
            },
            "ApiShareResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/ShareUrl"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_ShareUrl.path-or-params_": {
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The URL path of the full URL"
                    },
                    "params": {
                        "type": "string"
                    }
                },
                "required": ["path", "params"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "CreateShareUrl": {
                "$ref": "#/components/schemas/Pick_ShareUrl.path-or-params_",
                "description": "Contains the detail of a full URL to generate a short URL id"
            },
            "SlackChannel": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": ["name", "id"],
                "type": "object"
            },
            "ApiSlackChannelsResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/SlackChannel"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_SavedChart.uuid-or-name-or-updatedAt-or-updatedByUser-or-description-or-spaceUuid-or-pinnedListUuid-or-pinnedListOrder_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "updatedAt",
                    "spaceUuid",
                    "pinnedListUuid",
                    "pinnedListOrder"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ViewStatistics": {
                "properties": {
                    "firstViewedAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": ["firstViewedAt", "views"],
                "type": "object"
            },
            "SpaceQuery": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_SavedChart.uuid-or-name-or-updatedAt-or-updatedByUser-or-description-or-spaceUuid-or-pinnedListUuid-or-pinnedListOrder_"
                    },
                    {
                        "$ref": "#/components/schemas/ViewStatistics"
                    },
                    {
                        "properties": {
                            "validationErrors": {
                                "items": {
                                    "$ref": "#/components/schemas/ValidationSummary"
                                },
                                "type": "array"
                            },
                            "chartType": {
                                "$ref": "#/components/schemas/ChartKind"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "Pick_Dashboard.uuid-or-name-or-description-or-updatedAt-or-projectUuid-or-updatedByUser-or-organizationUuid-or-spaceUuid-or-views-or-firstViewedAt-or-pinnedListUuid-or-pinnedListOrder_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "firstViewedAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": [
                    "name",
                    "organizationUuid",
                    "uuid",
                    "updatedAt",
                    "projectUuid",
                    "spaceUuid",
                    "views",
                    "firstViewedAt",
                    "pinnedListUuid",
                    "pinnedListOrder"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "DashboardBasicDetails": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_Dashboard.uuid-or-name-or-description-or-updatedAt-or-projectUuid-or-updatedByUser-or-organizationUuid-or-spaceUuid-or-views-or-firstViewedAt-or-pinnedListUuid-or-pinnedListOrder_"
                    },
                    {
                        "properties": {
                            "validationErrors": {
                                "items": {
                                    "$ref": "#/components/schemas/ValidationSummary"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SpaceDashboard": {
                "$ref": "#/components/schemas/DashboardBasicDetails"
            },
            "SpaceShare": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "userUuid": {
                        "type": "string"
                    }
                },
                "required": ["role", "lastName", "firstName", "userUuid"],
                "type": "object"
            },
            "Space": {
                "properties": {
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "access": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceShare"
                        },
                        "type": "array"
                    },
                    "dashboards": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceDashboard"
                        },
                        "type": "array"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "queries": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceQuery"
                        },
                        "type": "array"
                    },
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "pinnedListOrder",
                    "pinnedListUuid",
                    "access",
                    "dashboards",
                    "projectUuid",
                    "queries",
                    "isPrivate",
                    "name",
                    "uuid",
                    "organizationUuid"
                ],
                "type": "object"
            },
            "ApiSpaceResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Space"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_Space.name_": {
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["name"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Partial_Pick_Space.isPrivate-or-access__": {
                "properties": {
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "access": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceShare"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "CreateSpace": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_Space.name_"
                    },
                    {
                        "$ref": "#/components/schemas/Partial_Pick_Space.isPrivate-or-access__"
                    }
                ]
            },
            "Pick_Space.name-or-isPrivate_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "isPrivate": {
                        "type": "boolean"
                    }
                },
                "required": ["name", "isPrivate"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "UpdateSpace": {
                "$ref": "#/components/schemas/Pick_Space.name-or-isPrivate_"
            },
            "Pick_SpaceShare.userUuid_": {
                "properties": {
                    "userUuid": {
                        "type": "string"
                    }
                },
                "required": ["userUuid"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "AddSpaceShare": {
                "$ref": "#/components/schemas/Pick_SpaceShare.userUuid_"
            },
            "Pick_SshKeyPair.publicKey_": {
                "properties": {
                    "publicKey": {
                        "type": "string"
                    }
                },
                "required": ["publicKey"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ApiSshKeyPairResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Pick_SshKeyPair.publicKey_"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "EmailOneTimePassword": {
                "properties": {
                    "numberOfAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": "Number of times the passcode has been attempted"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time that the passcode was created"
                    }
                },
                "required": ["numberOfAttempts", "createdAt"],
                "type": "object"
            },
            "EmailStatus": {
                "properties": {
                    "otp": {
                        "$ref": "#/components/schemas/EmailOneTimePassword"
                    },
                    "isVerified": {
                        "type": "boolean"
                    },
                    "email": {
                        "type": "string"
                    }
                },
                "required": ["isVerified", "email"],
                "type": "object"
            },
            "EmailOneTimePasswordExpiring": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EmailOneTimePassword"
                    },
                    {
                        "properties": {
                            "isMaxAttempts": {
                                "type": "boolean"
                            },
                            "isExpired": {
                                "type": "boolean"
                            },
                            "expiresAt": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "required": ["isMaxAttempts", "isExpired", "expiresAt"],
                        "type": "object"
                    }
                ]
            },
            "EmailStatusExpiring": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EmailStatus"
                    },
                    {
                        "properties": {
                            "otp": {
                                "$ref": "#/components/schemas/EmailOneTimePasswordExpiring",
                                "description": "One time passcode information\nIf there is no active passcode, this will be undefined"
                            }
                        },
                        "type": "object"
                    }
                ],
                "description": "Verification status of an email address"
            },
            "ApiEmailStatusResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/EmailStatusExpiring"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object",
                "description": "Shows the current verification status of an email address"
            },
            "UserAllowedOrganization": {
                "properties": {
                    "membersCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    }
                },
                "required": ["membersCount", "name", "organizationUuid"],
                "type": "object"
            },
            "ApiUserAllowedOrganizationsResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/UserAllowedOrganization"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiJobScheduledResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "jobId": {
                                "type": "string"
                            }
                        },
                        "required": ["jobId"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ValidationErrorType": {
                "enum": [
                    "chart",
                    "sorting",
                    "filter",
                    "metric",
                    "model",
                    "dimension"
                ],
                "type": "string"
            },
            "ValidationSourceType": {
                "enum": ["chart", "dashboard", "table"],
                "type": "string"
            },
            "ValidationResponseBase": {
                "properties": {
                    "source": {
                        "$ref": "#/components/schemas/ValidationSourceType"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "errorType": {
                        "$ref": "#/components/schemas/ValidationErrorType"
                    },
                    "error": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "validationId": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "projectUuid",
                    "errorType",
                    "error",
                    "name",
                    "createdAt",
                    "validationId"
                ],
                "type": "object"
            },
            "ValidationErrorChartResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ValidationResponseBase"
                    },
                    {
                        "properties": {
                            "chartViews": {
                                "type": "number",
                                "format": "double"
                            },
                            "lastUpdatedAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "lastUpdatedBy": {
                                "type": "string"
                            },
                            "fieldName": {
                                "type": "string"
                            },
                            "chartType": {
                                "$ref": "#/components/schemas/ChartKind"
                            },
                            "chartUuid": {
                                "type": "string"
                            }
                        },
                        "required": ["chartViews"],
                        "type": "object"
                    }
                ]
            },
            "ValidationErrorDashboardResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ValidationResponseBase"
                    },
                    {
                        "properties": {
                            "dashboardViews": {
                                "type": "number",
                                "format": "double"
                            },
                            "lastUpdatedAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "lastUpdatedBy": {
                                "type": "string"
                            },
                            "fieldName": {
                                "type": "string"
                            },
                            "chartName": {
                                "type": "string"
                            },
                            "dashboardUuid": {
                                "type": "string"
                            }
                        },
                        "required": ["dashboardViews"],
                        "type": "object"
                    }
                ]
            },
            "Pick_ValidationResponseBase.Exclude_keyofValidationResponseBase.name__": {
                "properties": {
                    "projectUuid": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "validationId": {
                        "type": "number",
                        "format": "double"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "error": {
                        "type": "string"
                    },
                    "errorType": {
                        "$ref": "#/components/schemas/ValidationErrorType"
                    },
                    "source": {
                        "$ref": "#/components/schemas/ValidationSourceType"
                    }
                },
                "required": [
                    "projectUuid",
                    "validationId",
                    "createdAt",
                    "error",
                    "errorType"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_ValidationResponseBase.name_": {
                "$ref": "#/components/schemas/Pick_ValidationResponseBase.Exclude_keyofValidationResponseBase.name__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "ValidationErrorTableResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Omit_ValidationResponseBase.name_"
                    },
                    {
                        "properties": {
                            "name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ValidationResponse": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/ValidationErrorChartResponse"
                    },
                    {
                        "$ref": "#/components/schemas/ValidationErrorDashboardResponse"
                    },
                    {
                        "$ref": "#/components/schemas/ValidationErrorTableResponse"
                    }
                ]
            },
            "ApiValidateResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationResponse"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiValidationDismissResponse": {
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["status"],
                "type": "object"
            }
        },
        "securitySchemes": {
            "session_cookie": {
                "type": "apiKey",
                "in": "cookie",
                "name": "connect.sid"
            },
            "api_key": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization",
                "description": "Value should be 'ApiKey <your key>'"
            }
        }
    },
    "info": {
        "title": "Lightdash API",
        "version": "0.605.0",
        "description": "Open API documentation for all public Lightdash API endpoints",
        "license": {
            "name": "MIT"
        },
        "contact": {
            "name": "Lightdash Support",
            "email": "support@lightdash.com",
            "url": "https://docs.lightdash.com/help-and-contact/contact/contact_info/"
        }
    },
    "openapi": "3.0.0",
    "paths": {
        "/api/v1/csv/{jobId}": {
            "get": {
                "operationId": "getCsvUrl",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCsvUrlResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a Csv",
                "tags": ["Exports"],
                "security": [],
                "parameters": [
                    {
                        "description": "the jobId for the CSV",
                        "in": "path",
                        "name": "jobId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/integrations/dbt-cloud/settings": {
            "get": {
                "operationId": "getDbtCloudIntegrationSettings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiDbtCloudIntegrationSettings"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get the current dbt Cloud integration settings for a project",
                "tags": ["Integrations"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "updateDbtCloudIntegrationSettings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiDbtCloudIntegrationSettings"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update the dbt Cloud integration settings for a project",
                "tags": ["Integrations"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "deleteDbtCloudIntegrationSettings",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiDbtCloudSettingsDeleteSuccess"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Remove the dbt Cloud integration settings for a project",
                "tags": ["Integrations"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/integrations/dbt-cloud/metrics": {
            "get": {
                "operationId": "getDbtCloudMetrics",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiDbtCloudMetrics"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a list of dbt metric definitions from the dbt Cloud metadata api.\nThe metrics are taken from the metadata from a single dbt Cloud job configured\nwith the dbt Cloud integration settings for the project.",
                "tags": ["Integrations"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/groups/{groupUuid}": {
            "get": {
                "operationId": "getGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGroupResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get group details",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "description": "unique id of the group",
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "deleteGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Delete a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "updateGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGroupResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGroup"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/groups/{groupUuid}/members/{userUuid}": {
            "put": {
                "operationId": "addUserToGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Add a Lightdash user to a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "description": "the UUID for the group to add the user to",
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the UUID for the user to add to the group",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "removeUserFromGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Remove a user from a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "description": "the UUID for the group to remove the user from",
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the UUID for the user to remove from the group",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/groups/{groupUuid}/members": {
            "get": {
                "operationId": "getGroupMembers",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGroupMembersResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "View members of a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "description": "the UUID for the group to view the members of",
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/org": {
            "get": {
                "operationId": "GetMyOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganization"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": []
            },
            "put": {
                "operationId": "CreateOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Creates a new organization, the current user becomes the Admin of the new organization.\nThis is only available to users that are not already in an organization.",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "the new organization settings",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrganization",
                                "description": "the new organization settings"
                            }
                        }
                    }
                }
            },
            "patch": {
                "operationId": "UpdateMyOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "the new organization settings",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrganization",
                                "description": "the new organization settings"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/{organizationUuid}": {
            "delete": {
                "operationId": "DeleteMyOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Deletes an organization and all users inside that organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the organization to delete",
                        "in": "path",
                        "name": "organizationUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/org/users": {
            "get": {
                "operationId": "ListOrganizationMembers",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganizationMemberProfiles"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Gets all the members of the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/org/users/{userUuid}": {
            "patch": {
                "operationId": "UpdateOrganizationMember",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganizationMemberProfile"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Updates the membership profile for a user in the current user's organization",
                "tags": ["Roles & Permissions", "Organizations"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the user to update",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the new membership profile",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationMemberProfileUpdate",
                                "description": "the new membership profile"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/user/{userUuid}": {
            "delete": {
                "operationId": "DeleteOrganizationMember",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Deletes a user from the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the user to delete",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/org/allowedEmailDomains": {
            "get": {
                "operationId": "ListOrganizationEmailDomains",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganizationAllowedEmailDomains"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Gets the allowed email domains for the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": []
            },
            "patch": {
                "operationId": "UpdateOrganizationEmailDomains",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganizationAllowedEmailDomains"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Gets the allowed email domains for the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAllowedEmailDomains"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/groups": {
            "post": {
                "operationId": "CreateGroupInOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGroupResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Creates a new group in the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pick_CreateGroup.name_"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "ListGroupsInOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGroupListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Gets all the groups in the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/projects/{projectUuid}/pinned-lists/{pinnedListUuid}/items": {
            "get": {
                "operationId": "getPinnedItems",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiPinnedItems"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get pinned items",
                "tags": ["Content"],
                "security": [],
                "parameters": [
                    {
                        "description": "project uuid",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the list uuid for the pinned items",
                        "in": "path",
                        "name": "pinnedListUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/pinned-lists/{pinnedListUuid}/items/order": {
            "patch": {
                "operationId": "updatePinnedItemsOrder",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiPinnedItems"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update pinned items order",
                "tags": ["Content"],
                "security": [],
                "parameters": [
                    {
                        "description": "project uuid",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the list uuid for the pinned items",
                        "in": "path",
                        "name": "pinnedListUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the new order of the pinned items",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/UpdatePinnedItemOrder"
                                },
                                "type": "array",
                                "description": "the new order of the pinned items"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/charts": {
            "get": {
                "operationId": "ListChartsInProject",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiChartSummaryListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "List all charts in a project",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project to get charts for",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/spaces": {
            "get": {
                "operationId": "ListSpacesInProject",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpaceSummaryListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "List all spaces in a project",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project to get spaces for",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "CreateSpaceInProject",
                "responses": {
                    "200": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpaceResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Create a new space inside a project",
                "tags": ["Roles & Permissions", "Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSpace"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/access": {
            "get": {
                "operationId": "GetProjectAccessList",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiProjectAccessListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get access list for a project. This is a list of users that have been explictly granted access to the project.\nThere may be other users that have access to the project via their organization membership.",
                "tags": ["Roles & Permissions", "Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "GrantProjectAccessToUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Grant a user access to a project",
                "tags": ["Roles & Permissions", "Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProjectMember"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/access/{userUuid}": {
            "patch": {
                "operationId": "UpdateProjectAccessForUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update a user's access to a project",
                "tags": ["Roles & Permissions", "Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProjectMember"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "RevokeProjectAccessForUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Remove a user's access to a project",
                "tags": ["Roles & Permissions", "Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/explores/{exploreId}/runUnderlyingDataQuery": {
            "post": {
                "operationId": "postRunUnderlyingDataQuery",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRunQueryResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Run a query for underlying data results",
                "tags": ["Exploring"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "table name",
                        "in": "path",
                        "name": "exploreId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "metricQuery for the chart to run",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RunQueryRequest",
                                "description": "metricQuery for the chart to run"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/explores/{exploreId}/runQuery": {
            "post": {
                "operationId": "postRunQuery",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRunQueryResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Run a query for explore",
                "tags": ["Exploring"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "table name",
                        "in": "path",
                        "name": "exploreId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "metricQuery for the chart to run",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RunQueryRequest",
                                "description": "metricQuery for the chart to run"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/saved/{chartUuid}/results": {
            "post": {
                "operationId": "postChartResults",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRunQueryResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Run a query for a chart",
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "description": "chartUuid for the chart to run",
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "filters": {
                                        "$ref": "#/components/schemas/Filters"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/schedulers/{projectUuid}/logs": {
            "get": {
                "operationId": "getSchedulerLogs",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSchedulerLogsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get scheduled logs",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/schedulers/{schedulerUuid}": {
            "get": {
                "operationId": "getScheduler",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSchedulerAndTargetsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a scheduler",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the scheduler to update",
                        "in": "path",
                        "name": "schedulerUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "updateScheduler",
                "responses": {
                    "201": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSchedulerAndTargetsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update a scheduler",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the scheduler to update",
                        "in": "path",
                        "name": "schedulerUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the new scheduler data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "the new scheduler data"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteScheduler",
                "responses": {
                    "201": {
                        "description": "Deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {},
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Delete a scheduler",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the scheduler to delete",
                        "in": "path",
                        "name": "schedulerUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/schedulers/{schedulerUuid}/jobs": {
            "get": {
                "operationId": "getScheduledJobs",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiScheduledJobsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get scheduled jobs",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the scheduler to update",
                        "in": "path",
                        "name": "schedulerUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/schedulers/job/{jobId}/status": {
            "get": {
                "operationId": "getSchedulerJobStatus",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiJobStatusResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a generic job status\nThis method can be used when polling from the frontend",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "the jobId for the status to check",
                        "in": "path",
                        "name": "jobId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/share/{nanoId}": {
            "get": {
                "operationId": "getShareUrl",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiShareResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a share url from a short url id",
                "tags": ["Share links"],
                "security": [],
                "parameters": [
                    {
                        "description": "the short id for the share url",
                        "in": "path",
                        "name": "nanoId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/share": {
            "post": {
                "operationId": "CreateShareUrl",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiShareResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Given a full URL generates a short url id that can be used for sharing",
                "tags": ["Share links"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "a full URL used to generate a short url id",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateShareUrl",
                                "description": "a full URL used to generate a short url id"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/slack/channels": {
            "get": {
                "operationId": "getSlackChannels",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSlackChannelsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get slack channels",
                "tags": ["Integrations"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/projects/{projectUuid}/spaces/{spaceUuid}": {
            "get": {
                "operationId": "GetSpace",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpaceResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get details for a space in a project",
                "tags": ["Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the space to get",
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "DeleteSpace",
                "responses": {
                    "204": {
                        "description": "Deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Delete a space from a project",
                "tags": ["Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the space to delete",
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "UpdateSpace",
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpaceResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update a space in a project",
                "tags": ["Roles & Permissions", "Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the space to update",
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSpace"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/spaces/{spaceUuid}/share": {
            "post": {
                "operationId": "AddSpaceShareToUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Grant a user access to a space",
                "tags": ["Roles & Permissions", "Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddSpaceShare"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/spaces/{spaceUuid}/share/{userUuid}": {
            "delete": {
                "operationId": "RevokeProjectAccessForUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Remove a user's access to a space",
                "tags": ["Roles & Permissions", "Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the space to update",
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the user to revoke access from",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/ssh/key-pairs": {
            "post": {
                "operationId": "createSshKeyPair",
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSshKeyPairResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["SSH Keypairs"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/user/me/email/otp": {
            "put": {
                "operationId": "CreateEmailOneTimePasscode",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiEmailStatusResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Create a new one-time passcode for the current user's primary email.\nThe user will receive an email with the passcode.",
                "tags": ["My Account"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/user/me/email/status": {
            "get": {
                "operationId": "GetEmailVerificationStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiEmailStatusResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get the verification status for the current user's primary email",
                "tags": ["My Account"],
                "security": [],
                "parameters": [
                    {
                        "description": "the one-time passcode sent to the user's primary email",
                        "in": "query",
                        "name": "passcode",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/user/me/allowedOrganizations": {
            "get": {
                "operationId": "ListMyAvailableOrganizations",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUserAllowedOrganizationsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "List the organizations that the current user can join.\nThis is based on the user's primary email domain and the organization's allowed email domains.",
                "tags": ["My Account"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/user/me/joinOrganization/{organizationUuid}": {
            "post": {
                "operationId": "JoinOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Add the current user to an organization that accepts users with a verified email domain.\nThis will fail if the organization email domain does not match the user's primary email domain.",
                "tags": ["My Account"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the organization to join",
                        "in": "path",
                        "name": "organizationUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/user/me": {
            "delete": {
                "operationId": "DeleteMe",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Delete user",
                "tags": ["My Account"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/projects/{projectUuid}/validate": {
            "post": {
                "operationId": "ValidateProject",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiJobScheduledResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Validate content inside a project. This will start a validation job and return the job id.\n\nValidation jobs scan all charts and dashboards inside a project to find any broken references\nto metrics or dimensions that aren't available. Results are available after the job is completed.",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "the projectId for the validation",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the compiled explores to validate against an existing project, this is used in the CLI to validate a project without creating a preview",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "explores": {
                                        "items": {},
                                        "type": "array"
                                    }
                                },
                                "type": "object",
                                "description": "the compiled explores to validate against an existing project, this is used in the CLI to validate a project without creating a preview"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetLatestValidationResults",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiValidateResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get validation results for a project. This will return the results of the latest validation job.",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "the projectId for the validation",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "boolean to know if this request is made from the settings page, for analytics",
                        "in": "query",
                        "name": "fromSettings",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "optional jobId to get results for a specific job, used on CLI",
                        "in": "query",
                        "name": "jobId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/validate/{validationId}": {
            "delete": {
                "operationId": "DeleteValidationDismiss",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiValidationDismissResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Deletes a single validation error.",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "the projectId for the validation",
                        "in": "path",
                        "name": "validationId",
                        "required": true,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            }
        }
    },
    "servers": [
        {
            "url": "/"
        }
    ],
    "tags": [
        {
            "name": "My Account",
            "description": "These routes allow users to manage their own user account."
        },
        {
            "name": "Organizations",
            "description": "Each user is a member of a single organization. These routes allow users to manage their organization. Most actions are only available to admin users."
        },
        {
            "name": "Projects",
            "description": "Projects belong to a single organization. These routes allow users to manage their projects, browse content, and execute queries. Users inside an organization might have access to a project from an organization-level role or they might be granted access to a project directly."
        },
        {
            "name": "Spaces",
            "description": "Spaces allow you to organize charts and dashboards within a project. They also allow granular access to content by allowing you to create private spaces, which are only accessible to the creator and admins."
        },
        {
            "name": "Roles & Permissions",
            "description": "These routes allow users to manage roles and permissions for their organization.",
            "externalDocs": {
                "url": "https://docs.lightdash.com/references/roles"
            }
        }
    ]
}
